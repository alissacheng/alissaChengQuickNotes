{"version":3,"sources":["firebase.js","TypeNotes.js","ImageUpload.jsx","ButtonPanel.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","TypeNotes","closeDialog","document","getElementById","removeAttribute","classList","add","setState","userInput","noteId","handleChange","event","target","value","handleSubmit","preventDefault","addNote","state","notesRef","database","ref","child","push","alert","editNote","setAttribute","remove","id","saveNote","set","cloneNotesList","notesList","forEach","item","noteText","deleteNote","on","snapshot","notes","val","newNotes","key","singleNote","className","type","onClick","this","title","rows","cols","onChange","map","noteValue","i","role","aria-label","aria-hidden","tabIndex","readOnly","Component","ImageUpload","image","files","selectedFile","name","put","photoName","newImages","getDownloadURL","then","url","singleImage","photoId","photoUrl","photosList","error","code","deletePhoto","amount","element","delete","accept","htmlFor","src","alt","ButtonPanel","props","toggleThemeProp","openDialogProp","App","openDialog","toggleTheme","themeRef","checked","body","style","background","theme","lavender","cork","open","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76c7b9a0.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/storage'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCjdQkJDOhBKPGulvr1a9rViGzoYcMjySA\",\r\n    authDomain: \"project-five-1c3a4.firebaseapp.com\",\r\n    databaseURL: \"https://project-five-1c3a4.firebaseio.com\",\r\n    projectId: \"project-five-1c3a4\",\r\n    storageBucket: \"project-five-1c3a4.appspot.com\",\r\n    messagingSenderId: \"758428410845\",\r\n    appId: \"1:758428410845:web:05dceab7554153b3114c34\"\r\n    };\r\n  // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n    \r\nconst storage = firebase.storage();\r\n\r\nexport{\r\n  storage, firebase as default\r\n}","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport firebase from \"./firebase.js\"\r\n\r\nclass TypeNotes extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            notesList:[],\r\n            userInput: \"\",\r\n            noteId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //Retrieve notes by connecting to firebase\r\n        const notesRef = firebase.database().ref().child(\"notes\")\r\n            notesRef.on(\"value\", (snapshot) =>{\r\n                \r\n                const notes = snapshot.val();\r\n                const newNotes = [];\r\n\r\n                //for every object, we create a new object with two key values: note text and note id\r\n                for(let key in notes){\r\n\r\n                //Find out the key of each note value in firebase, to figure out how to delete each later\r\n                    const singleNote = {\r\n                        noteId: key,\r\n                        noteText: notes[key]\r\n                    }\r\n\r\n                    newNotes.push(singleNote)\r\n                }\r\n\r\n            //Update state for notes - taking new array and updating it\r\n            this.setState({\r\n                notesList:newNotes\r\n            })\r\n        })\r\n    }\r\n\r\n//Closing dialogs whenever user clicks the \"x\"\r\n    closeDialog = () => {\r\n        document.getElementById(\"dialog\").removeAttribute(\"open\")\r\n        document.getElementById(\"dialog\").classList.add(\"visuallyHidden\")\r\n        document.getElementById(\"edit\").removeAttribute(\"open\")\r\n        document.getElementById(\"edit\").classList.add(\"visuallyHidden\")\r\n//Clear user input and user id once dialog closes\r\n        this.setState({\r\n            userInput: \"\",\r\n            noteId:null\r\n        })\r\n    }\r\n\r\n    //Update state everytime user types inside input text bar\r\n    handleChange = (event) =>{\r\n        this.setState({\r\n            userInput: event.target.value\r\n        })\r\n    }\r\n\r\n    //Submitting form for creating a new note\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //Put what we submit in a constant then push to firebase, update state, re render app\r\n        const addNote = this.state.userInput\r\n        //add to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\r\n\r\n        //push to firebase\r\n        const notesRef = firebase.database().ref().child(\"notes\")\r\n\r\n        // Make sure no empty strings are submitted\r\n        if(addNote !== \"\"){\r\n            notesRef.push(addNote)\r\n            //Make user input an empty string, make sure to update HTML with value attribute\r\n            this.setState({\r\n                userInput: \"\"\r\n            })\r\n        }else{\r\n            alert(\"Sorry! Blank notes cannot be submitted.\")\r\n        }\r\n    }\r\n\r\n    //Edit note written by user\r\n    editNote = (event) => {\r\n        event.preventDefault();\r\n\r\n        document.getElementById(\"edit\").setAttribute(\"open\", true)\r\n        document.getElementById(\"edit\").classList.remove(\"visuallyHidden\")\r\n//Bind inputs\r\n        this.setState({\r\n            userInput: event.target.value,\r\n            noteId: event.target.id\r\n        })\r\n\r\n    }\r\n//Save note editted\r\n    saveNote = (event) =>{\r\n        event.preventDefault();\r\n\r\n        const addNote = this.state.userInput\r\n        //add to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\r\n\r\n        // Make sure no empty strings are submitted\r\n        if(addNote !== \"\"){\r\n          //Make user input an empty string, make sure to update HTML with value attribute\r\n            this.setState({\r\n                userInput: \"\"\r\n            })\r\n          //Close dialog after saving new note\r\n            document.getElementById(\"edit\").removeAttribute(\"open\")\r\n            document.getElementById(\"edit\").classList.add(\"visuallyHidden\")\r\n\r\n//update firebase, then update state by cloning notesList array and changing it\r\n        firebase.database().ref(\"notes/\" + this.state.noteId).set(addNote);\r\n        //Clone notes list array to edit it because cannot edit original array in state directly\r\n            const cloneNotesList = [...this.state.notesList]\r\n          //Find id of notes list being edited and change it to new value\r\n            cloneNotesList.forEach( item => {\r\n            if (item.noteId === this.state.noteId){\r\n                item.noteText = addNote\r\n        //set state of newly changed array of notes list and set noteId back to null to bind inputs\r\n                this.setState({\r\n                    notesList: cloneNotesList,\r\n                    noteId: null\r\n                })\r\n            }\r\n        })\r\n          //Error handling blank notes\r\n        }else{\r\n            alert(\"Sorry! Blank notes cannot be submitted.\")\r\n        }\r\n\r\n    }\r\n\r\n//Delete written note by user\r\n    deleteNote = (event) => {\r\n        event.preventDefault();\r\n        const notesRef = firebase.database().ref().child(\"notes\");\r\n        notesRef.child(event.target.id).remove();\r\n    }\r\n//Render on page\r\n    render(){\r\n        return(\r\n            <section className=\"notes wrapper\" id=\"notes\">\r\n            {/* Dialog for form for writing and submitting a new note */}\r\n            <dialog id=\"dialog\" className=\"newNote visuallyHidden\">\r\n                <form>\r\n                <div className=\"titleBar\">\r\n                    <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\r\n                    <button type=\"submit\" title=\"Submit note\" onClick={this.handleSubmit}>Add Note +</button>\r\n                </div>\r\n                <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\r\n                </form>\r\n            </dialog>\r\n            {/* Dialog for form for editing and saving a new note */}\r\n            <dialog id=\"edit\" className=\"newNote visuallyHidden\">\r\n                <form>\r\n                <div className=\"titleBar\">\r\n                    <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\r\n                    <button type=\"submit\" title=\"Save note\" onClick={this.saveNote}>Save Note +</button>\r\n                </div>\r\n                <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\r\n                </form>\r\n            </dialog>\r\n            {/* Section to map array of notesList in state to display notes written by user */}\r\n            <ul className=\"notes\">\r\n                {this.state.notesList.map((noteValue, i)=>{\r\n                    return(\r\n                        <li key={i}>\r\n                            <div className=\"titleBar\">\r\n                            <button id={noteValue.noteId} value={noteValue.noteText} className=\"edit\" title=\"Edit note\" onClick={this.editNote}>\r\n                                <span role=\"img\" aria-label=\"notepad\" aria-hidden=\"true\">📝</span> \r\n                                Edit\r\n                            </button>\r\n                            <button id={noteValue.noteId} className=\"delete\" onClick={this.deleteNote} title=\"Delete note\" tabIndex=\"0\">X</button>\r\n                            </div>\r\n                            <textarea rows=\"7\" cols=\"16\" value={noteValue.noteText} readOnly></textarea>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TypeNotes;","import React, {Component} from \"react\";\r\nimport firebase, {storage} from \"./firebase\";\r\n\r\nclass ImageUpload extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            photosList: [],\r\n            selectedFile:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //Retrieve file name of each photo from database and storage bucket\r\n        firebase.database().ref().child(\"photos\").on(\"value\", (snapshot)=>{\r\n            const photoName = snapshot.val();\r\n            const newImages = [];\r\n\r\n            for(let key in photoName){\r\n                storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                    const singleImage = {\r\n                        photoId: key,\r\n                        photoName: photoName[key],\r\n                        photoUrl: url\r\n                    }\r\n\r\n                    newImages.push(singleImage);\r\n//Update the state for photos\r\n                    this.setState({\r\n                        photosList: newImages\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange =(event) =>{\r\n        \r\n        //This is the object file for the image uploaded\r\n        const image = event.target.files[0]\r\n\r\n        //Bind input changes\r\n        this.setState({\r\n            selectedFile: image\r\n        })\r\n\r\n        //only allow upload following file types for image files\r\n        if(image.type === \"image/jpeg\" || image.type === \"image/jpg\" || image.type === \"image/png\" || image.type === \"image/gif\"){\r\n\r\n            //Push the file name into the database\r\n            //Note: Ideally I would get the image url immediately after downloading image into storage bucket and push/store THIS in the database (instead of the file name), but this causes issues, must store file name into database and THEN download its url at a later time\r\n            const photosRef = firebase.database().ref().child(\"photos\")\r\n            photosRef.push(image.name);\r\n\r\n            //Upload image into storage bucket\r\n            const uploadImage = storage.ref(image.name).put(image)\r\n            uploadImage.on(\"state_changed\",\r\n            ()=>{   //update state after image is uploaded, so image displays immediately on screen\r\n                    //Must grab a snapshot from firebase of photos file names and download url for each in order to update state\r\n                    firebase.database().ref().child(\"photos\").on(\"value\", (snapshot)=>{\r\n                        const photoName = snapshot.val();\r\n                        const newImages = [];\r\n            \r\n                        for(let key in photoName){\r\n                            storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                                const singleImage = {\r\n                                    photoId: key,\r\n                                    photoName: photoName[key],\r\n                                    photoUrl: url\r\n                                }\r\n                            \r\n                                newImages.push(singleImage);\r\n            \r\n                                this.setState({\r\n                                    photosList: newImages\r\n                                })\r\n                            })\r\n                        }\r\n                    })\r\n                },\r\n                //Error handling\r\n                (error)=> {\r\n                    alert(`We could not upload your file at this time due to ${error.code}. Please try again later.`)\r\n                }\r\n            )\r\n        \r\n        }else{\r\n            alert(\"Sorry! The file format you uploaded could not be processed. Only JPG, JPEG, PNG and GIF files are allowed.\")\r\n        }\r\n    }\r\n\r\n    //Remove photo name from database and storage bucket\r\n    deletePhoto = (event) => {\r\n        const photosRef = firebase.database().ref().child(\"photos\");\r\n        photosRef.child(event.target.id).remove();\r\n\r\n        //remove from storage bucket only if there isn't two of the same image\r\n        let amount = 0\r\n        this.state.photosList.forEach(element => {\r\n            if(event.target.name === element.photoName){\r\n                amount += 1\r\n            }\r\n        })\r\n        //if amount of images in state is one or less, than there are no duplicates\r\n        if(amount < 2){\r\n            storage.ref().child(event.target.name).delete() \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"photos wrapper\" id=\"photos\">\r\n                {/* Default file upload button hidden */}\r\n                <input id=\"fileUpload\" type=\"file\" className=\"customUpload visuallyHidden\" tabIndex=\"1\" onChange={this.handleChange} accept=\"image/*\"/>\r\n                {/* Custom file upload button by styling label */}\r\n                <label htmlFor=\"fileUpload\" className=\"customUpload\" title=\"Upload photo\">\r\n                    <span className=\"visuallyHidden\">Click here to upload an image</span>▲ \r\n                </label>\r\n                {/* Map photosList array in state to see all photos uploaded by user */}\r\n                <ul className=\"gallery\">\r\n                    {this.state.photosList.map((item, i)=>{\r\n                        return(\r\n                        <li key={i}>\r\n                            <div className=\"titleBar\">\r\n                                <button id={item.photoId} name={item.photoName}className=\"delete\" onClick={this.deletePhoto} title=\"Delete photo\" tabIndex=\"0\">X</button>\r\n                            </div>\r\n                            <img src={item.photoUrl} alt={item.photoName}/>\r\n                        </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUpload","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst ButtonPanel = (props) => {\r\n    return(\r\n        <div>\r\n            {/* Switch to toggle background color / theme */}\r\n            <label className=\"switch\" title=\"Change theme\">\r\n            <span className=\"visuallyHidden\">Click here to change the theme</span>\r\n                <input type=\"checkbox\" onChange={props.toggleThemeProp} id=\"toggleTheme\" className=\"visuallyHidden\"/>\r\n                <span className=\"slider\"></span>\r\n            </label>\r\n            {/* Button to open dialog to create a new note */}\r\n            <button type=\"open\" onClick={props.openDialogProp} title=\"New note\">\r\n                <span className=\"visuallyHidden\">Click here to write a new note</span>+\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonPanel","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\"\nimport TypeNotes from \"./TypeNotes\"\nimport ImageUpload from \"./ImageUpload\"\nimport ButtonPanel from \"./ButtonPanel\"\n\nclass App extends Component {\n\n    componentDidMount(){\n      //Connect to firebase and retrieve theme last saved from firebase database to place on page\n      const themeRef = firebase.database().ref().child(\"theme\")\n\n      themeRef.on(\"value\", (snapshot) =>{\n        const theme = snapshot.val()\n\n        let lavender = 0\n        let cork = 0\n        for (let key in theme){\n          if(theme[key] === \"lavender\"){\n            lavender += 1;\n          }else{\n            cork += 1;\n          }\n\n          if(lavender === cork){\n            document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n            document.getElementById(\"toggleTheme\").checked = false;\n          }else{\n            document.body.style.background = \"#8386de\"\n            document.getElementById(\"toggleTheme\").checked = true;\n          }\n        }\n      })\n    }\n    //Open dialog form for creating a new note when user clicks the plus sign\n    openDialog = () => {\n      document.getElementById(\"dialog\").setAttribute(\"open\", true)\n      document.getElementById(\"dialog\").classList.remove(\"visuallyHidden\")\n    }\n//Closing dialogs whenever user clicks the \"x\"\n    closeDialog = () => {\n      document.getElementById(\"welcome\").removeAttribute(\"open\")\n      document.getElementById(\"welcome\").classList.add(\"visuallyHidden\")\n    }\n//Switches between two themes available whenever user toggles switch\n//Pushes theme chosen to firebase to save preferred theme for later\n    toggleTheme = (event) =>{\n      const themeRef = firebase.database().ref().child(\"theme\")\n      if(event.target.checked === true){\n        document.body.style.background = \"#8386de\"\n        themeRef.push(\"lavender\")\n      }else{\n        document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n        themeRef.push(\"cork\")\n      }\n    }\n\n//Render on page\n    render(){\n        return(\n            <main>\n              <ButtonPanel\n                toggleThemeProp={this.toggleTheme}\n                openDialogProp={this.openDialog}\n              />\n              {/* Welcome message and instructions dialog */}\n              <dialog id=\"welcome\" className=\"welcome\" open>\n                <div className=\"titleBar\">\n                  <button id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                </div>\n                <h1>Welcome to QuickNotes!</h1>\n                <p>QuickNotes is an application that allows you to save all your notes and photos in one convenient place.</p>\n                <p>Choose one of the three buttons in the top right panel to get started:</p>\n                <ul>\n                  <li>- Toggle the switch to change themes</li>\n                  <li>- Click the triangle (▲) to upload a photo</li>\n                  <li>- Click the plus sign (+) to create a new note</li>\n                  <li>- Click the \"x\" to delete an item and close the window</li>\n                </ul>\n              </dialog>\n              <TypeNotes/>\n              <ImageUpload/>\n            </main>\n        )\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}