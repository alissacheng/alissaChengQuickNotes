{"version":3,"sources":["firebase.js","ImageUpload.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","ImageUpload","handleChange","event","image","target","files","setState","selectedFile","type","database","ref","child","push","name","put","on","snapshot","photoName","val","newImages","key","getDownloadURL","then","url","singleImage","photoId","photoUrl","photosList","error","alert","code","deletePhoto","id","remove","amount","state","forEach","element","delete","className","tabIndex","onChange","this","accept","htmlFor","title","map","item","i","onClick","src","alt","Component","App","openDialog","document","getElementById","setAttribute","classList","closeDialog","removeAttribute","add","toggleTheme","themeRef","checked","body","style","background","userInput","value","handleSubmit","preventDefault","addNote","notesRef","editNote","userId","saveNote","set","cloneNotesList","notesList","noteId","noteText","deleteNote","notes","newNotes","singleNote","theme","lavender","cork","open","rows","cols","noteValue","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4d20820.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/storage'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCjdQkJDOhBKPGulvr1a9rViGzoYcMjySA\",\r\n    authDomain: \"project-five-1c3a4.firebaseapp.com\",\r\n    databaseURL: \"https://project-five-1c3a4.firebaseio.com\",\r\n    projectId: \"project-five-1c3a4\",\r\n    storageBucket: \"project-five-1c3a4.appspot.com\",\r\n    messagingSenderId: \"758428410845\",\r\n    appId: \"1:758428410845:web:05dceab7554153b3114c34\"\r\n    };\r\n  // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n    \r\nconst storage = firebase.storage();\r\n\r\nexport{\r\n  storage, firebase as default\r\n}","import React, {Component} from \"react\";\r\nimport firebase, {storage} from \"./firebase\";\r\n\r\nclass ImageUpload extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            photosList: [],\r\n            selectedFile:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //Retrieve file name of each photo from database and storage bucket\r\n        firebase.database().ref().child(\"photos\").on(\"value\", (snapshot)=>{\r\n            const photoName = snapshot.val();\r\n            const newImages = [];\r\n\r\n            for(let key in photoName){\r\n                storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                    const singleImage = {\r\n                        photoId: key,\r\n                        photoName: photoName[key],\r\n                        photoUrl: url\r\n                    }\r\n\r\n                    newImages.push(singleImage);\r\n//Update the state for photos\r\n                    this.setState({\r\n                        photosList: newImages\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange =(event) =>{\r\n        \r\n        //This is the object file for the image uploaded\r\n        const image = event.target.files[0]\r\n\r\n        //Bind input changes\r\n        this.setState({\r\n            selectedFile: image\r\n        })\r\n\r\n        //only allow upload following file types for image files\r\n        if(image.type === \"image/jpeg\" || image.type === \"image/jpg\" || image.type === \"image/png\" || image.type === \"image/gif\"){\r\n\r\n            //Push the file name into the database\r\n            //Note: Ideally I would get the image url immediately after downloading image into storage bucket and push/store THIS in the database (instead of the file name), but this causes issues, must store file name into database and THEN download its url at a later time\r\n            const photosRef = firebase.database().ref().child(\"photos\")\r\n            photosRef.push(image.name);\r\n\r\n            //Upload image into storage bucket\r\n            const uploadImage = storage.ref(image.name).put(image)\r\n            uploadImage.on(\"state_changed\",\r\n            ()=>{   //update state after image is uploaded, so image displays immediately on screen\r\n                    //Must grab a snapshot from firebase of photos file names and download url for each in order to update state\r\n                    firebase.database().ref().child(\"photos\").on(\"value\", (snapshot)=>{\r\n                        const photoName = snapshot.val();\r\n                        const newImages = [];\r\n            \r\n                        for(let key in photoName){\r\n                            storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                                const singleImage = {\r\n                                    photoId: key,\r\n                                    photoName: photoName[key],\r\n                                    photoUrl: url\r\n                                }\r\n                            \r\n                                newImages.push(singleImage);\r\n            \r\n                                this.setState({\r\n                                    photosList: newImages\r\n                                })\r\n                            })\r\n                        }\r\n                    })\r\n                },\r\n                //Error handling\r\n                (error)=> {\r\n                    alert(`We could not upload your file at this time due to ${error.code}. Please try again later.`)\r\n                }\r\n            )\r\n        \r\n        }else{\r\n            alert(\"Sorry! The file format you uploaded could not be processed. Only JPG, JPEG, PNG and GIF files are allowed.\")\r\n        }\r\n    }\r\n\r\n    //Remove photo name from database and storage bucket\r\n    deletePhoto = (event) => {\r\n        const photosRef = firebase.database().ref().child(\"photos\");\r\n        photosRef.child(event.target.id).remove();\r\n\r\n        //remove from storage bucket only if there isn't two of the same image\r\n        let amount = 0\r\n        this.state.photosList.forEach(element => {\r\n            if(event.target.name === element.photoName){\r\n                amount += 1\r\n            }\r\n        })\r\n        //if amount of images in state is one or less, than there are no duplicates\r\n        if(amount < 2){\r\n            storage.ref().child(event.target.name).delete() \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"photos wrapper\" id=\"photos\">\r\n                {/* Default file upload button hidden */}\r\n                <input id=\"fileUpload\" type=\"file\" className=\"customUpload visuallyHidden\" tabIndex=\"1\" onChange={this.handleChange} accept=\"image/*\"/>\r\n                {/* Custom file upload button by styling label */}\r\n                <label htmlFor=\"fileUpload\" className=\"customUpload\" title=\"Upload photo\">\r\n                    <span className=\"visuallyHidden\">Click here to upload an image</span>▲ \r\n                </label>\r\n                {/* Map photosList array in state to see all photos uploaded by user */}\r\n                <ul className=\"gallery\">\r\n                    {this.state.photosList.map((item, i)=>{\r\n                        return(\r\n                        <li key={i}>\r\n                            <div className=\"titleBar\">\r\n                                <button id={item.photoId} name={item.photoName}className=\"delete\" onClick={this.deletePhoto} title=\"Delete photo\" tabIndex=\"0\">X</button>\r\n                            </div>\r\n                            <img src={item.photoUrl} alt={item.photoName}/>\r\n                        </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUpload","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\"\nimport ImageUpload from \"./ImageUpload\"\n\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state ={\n            notesList:[],\n            userInput: \"\",\n            userId: null\n        }\n    }\n\n    componentDidMount(){\n    //connect to firebase\n    const notesRef = firebase.database().ref().child(\"notes\")\n    notesRef.on(\"value\", (snapshot) =>{\n        const notes = snapshot.val();\n\n        const newNotes = [];\n\n        //for every object, we create a new object with two key values: note text and note id\n        for(let key in notes){\n\n          //Find out the key of each note value in firebase, to figure out how to delete each later\n          const singleNote = {\n              noteId: key,\n              noteText: notes[key]\n            }\n\n            newNotes.push(singleNote)\n        }\n\n        //Update state for notes - taking new array and updating it\n          this.setState({\n              notesList:newNotes\n          })\n      })\n      //Retrieve theme last saved from firebase database to place on page\n      const themeRef = firebase.database().ref().child(\"theme\")\n\n      themeRef.on(\"value\", (snapshot) =>{\n        const theme = snapshot.val()\n\n        let lavender = 0\n        let cork = 0\n        for (let key in theme){\n          if(theme[key] === \"lavender\"){\n            lavender += 1;\n          }else{\n            cork += 1;\n          }\n\n          if(lavender === cork){\n            document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n            document.getElementById(\"toggleTheme\").checked = false;\n          }else{\n            document.body.style.background = \"#8386de\"\n            document.getElementById(\"toggleTheme\").checked = true;\n          }\n        }\n      })\n    }\n    //Open dialog form for creating a new note when user clicks the plus sign\n    openDialog = () => {\n      document.getElementById(\"dialog\").setAttribute(\"open\", true)\n      document.getElementById(\"dialog\").classList.remove(\"visuallyHidden\")\n    }\n//Closing dialogs whenever user clicks the \"x\"\n    closeDialog = () => {\n      document.getElementById(\"dialog\").removeAttribute(\"open\")\n      document.getElementById(\"dialog\").classList.add(\"visuallyHidden\")\n      document.getElementById(\"welcome\").removeAttribute(\"open\")\n      document.getElementById(\"welcome\").classList.add(\"visuallyHidden\")\n      document.getElementById(\"edit\").removeAttribute(\"open\")\n      document.getElementById(\"edit\").classList.add(\"visuallyHidden\")\n    }\n//Switches between two themes available whenever user toggles switch\n//Pushes theme chosen to firebase to save preferred theme for later\n    toggleTheme = (event) =>{\n      const themeRef = firebase.database().ref().child(\"theme\")\n      if(event.target.checked === true){\n        document.body.style.background = \"#8386de\"\n        themeRef.push(\"lavender\")\n      }else{\n        document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n        themeRef.push(\"cork\")\n      }\n    }\n\n    //Update state everytime user types inside input text bar\n    handleChange = (event) =>{\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n    //Submitting form for creating a new note\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //Put what we submit, the book title, in a constant\n        const addNote = this.state.userInput\n        //add to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\n\n        //push to firebase\n        const notesRef = firebase.database().ref().child(\"notes\")\n\n        // Make sure no empty strings are submitted\n        if(addNote !== \"\"){\n            notesRef.push(addNote)\n            //Make user input an empty string, make sure to update HTML with value attribute\n            this.setState({\n                userInput: \"\"\n            })\n        }else{\n          alert(\"Sorry! Blank notes cannot be submitted.\")\n        }\n  \n    }\n//Edit note written by user\n    editNote = (event) => {\n      event.preventDefault();\n\n      document.getElementById(\"edit\").setAttribute(\"open\", true)\n      document.getElementById(\"edit\").classList.remove(\"visuallyHidden\")\n//Bind inputs\n      this.setState({\n        userInput: event.target.value,\n        userId: event.target.id\n      })\n\n    }\n//Save note after edits\n    saveNote = (event) =>{\n      event.preventDefault();\n\n      const addNote = this.state.userInput\n        //add to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\n\n        // Make sure no empty strings are submitted\n        if(addNote !== \"\"){\n          //Make user input an empty string, make sure to update HTML with value attribute\n          this.setState({\n              userInput: \"\"\n          })\n          //Close dialog after saving new note\n          document.getElementById(\"edit\").removeAttribute(\"open\")\n          document.getElementById(\"edit\").classList.add(\"visuallyHidden\")\n            \n//update firebase, then update state by cloning notesList array and changing it\n          firebase.database().ref(\"notes/\" + this.state.userId).set(addNote);\n        //Clone notes list array to edit it because cannot edit original array in state directly\n          const cloneNotesList = [...this.state.notesList]\n          //Find id of notes list being edited and change it to new value\n          cloneNotesList.forEach( item => {\n            if (item.noteId === this.state.userId){\n              item.noteText = addNote\n        //set state of newly changed array of notes list to bind inputs\n              this.setState({\n                notesList: cloneNotesList,\n                userId: null\n              })\n            }\n          })\n          //Error handling blank notes\n        }else{\n          alert(\"Sorry! Blank notes cannot be submitted.\")\n        }\n\n    }\n//Delete written note by user\n    deleteNote = (event) => {\n      event.preventDefault();\n\n      const notesRef = firebase.database().ref().child(\"notes\");\n\n      notesRef.child(event.target.id).remove();\n    }\n//Render on page\n    render(){\n        return(\n            <main>\n              {/* Toggle switch for two themes */}\n              <label className=\"switch\" title=\"Change theme\">\n              <span className=\"visuallyHidden\">Click here to change the theme</span>\n                <input type=\"checkbox\" onChange={this.toggleTheme} id=\"toggleTheme\" tabIndex=\"0\" className=\"visuallyHidden\"/>\n                <span className=\"slider\"></span>\n              </label>\n              {/* Welcome message and instructions dialog */}\n              <dialog id=\"welcome\" className=\"welcome\" open>\n                <div className=\"titleBar\">\n                  <button id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                </div>\n                <h1>Welcome to QuickNotes!</h1>\n                <p>QuickNotes is an application that allows you to save all your notes and photos in one convenient place.</p>\n                <p>Choose one of the three buttons in the top right panel to get started:</p>\n                <ul>\n                  <li>- Toggle the switch to change themes</li>\n                  <li>- Click the triangle (▲) to upload a photo</li>\n                  <li>- Click the plus sign (+) to create a new note</li>\n                  <li>- Click the \"x\" to delete an item and close the window</li>\n                </ul>\n              </dialog>\n              {/* Section for displaying notes */}\n              <section className=\"notes wrapper\" id=\"notes\">\n                {/* Button to open dialog to create a new note */}\n                <button type=\"open\" onClick={this.openDialog} title=\"New note\">\n                  <span className=\"visuallyHidden\">Click here to write a new note</span>+\n                </button>\n                {/* Dialog for form for writing and submitting a new note */}\n                <dialog id=\"dialog\" className=\"newNote visuallyHidden\">\n                  <form>\n                    <div className=\"titleBar\">\n                      <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                      <button type=\"submit\" title=\"Submit note\" onClick={this.handleSubmit}>Add Note +</button>\n                    </div>\n                    <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\n                  </form>\n                </dialog>\n                {/* Dialog for form for editing and saving previous notes */}\n                <dialog id=\"edit\" className=\"newNote visuallyHidden\">\n                  <form>\n                    <div className=\"titleBar\">\n                      <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                      <button type=\"submit\" title=\"Save note\" onClick={this.saveNote}>Save Note +</button>\n                    </div>\n                    <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\n                  </form>\n                </dialog>\n                {/* Section to map array of notesList in state to display notes written by user */}\n                <ul className=\"notes\">\n                    {this.state.notesList.map((noteValue, i)=>{\n                        return(\n                            <li key={i}>\n                              <div className=\"titleBar\">\n                                <button id={noteValue.noteId} value={noteValue.noteText} className=\"edit\" title=\"Edit note\" onClick={this.editNote}>📝 Edit</button>\n                                <button id={noteValue.noteId} className=\"delete\" onClick={this.deleteNote} title=\"Delete note\" tabIndex=\"0\">X</button>\n                              </div>\n                              <textarea rows=\"7\" cols=\"16\" value={noteValue.noteText} readOnly></textarea>\n                            </li>\n                        )\n                    })}\n                </ul>\n              </section>\n              <ImageUpload/>\n            </main>\n        )\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}