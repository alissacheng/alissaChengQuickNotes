{"version":3,"sources":["firebase.js","ImageUpload.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","ImageUpload","handleChange","event","image","target","files","database","ref","child","push","name","put","on","snapshot","photoName","val","newImages","key","getDownloadURL","then","url","singleImage","photoId","photoUrl","setState","photosList","deletePhoto","id","remove","state","className","type","tabindex","onChange","this","for","title","class","map","item","i","onClick","src","alt","Component","App","openDialog","document","getElementById","setAttribute","closeDialog","removeAttribute","toggleTheme","themeRef","checked","body","style","background","userInput","value","handleSubmit","preventDefault","addNote","notesRef","deleteNote","console","log","notesList","notes","newNotes","singleNote","noteId","noteText","theme","lavender","cork","open","onSubmit","rows","cols","noteValue","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97eb95a3.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/storage'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCjdQkJDOhBKPGulvr1a9rViGzoYcMjySA\",\r\n    authDomain: \"project-five-1c3a4.firebaseapp.com\",\r\n    databaseURL: \"https://project-five-1c3a4.firebaseio.com\",\r\n    projectId: \"project-five-1c3a4\",\r\n    storageBucket: \"project-five-1c3a4.appspot.com\",\r\n    messagingSenderId: \"758428410845\",\r\n    appId: \"1:758428410845:web:05dceab7554153b3114c34\"\r\n    };\r\n  // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n    \r\nconst storage = firebase.storage();\r\n\r\nexport{\r\n  storage, firebase as default\r\n}","import React, {Component} from \"react\";\r\nimport firebase, {storage} from \"./firebase\";\r\n\r\nclass ImageUpload extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            photosList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //retrieve file name of each photo from database\r\n        firebase.database().ref().child(\"photos\").on(\"value\", (snapshot)=>{\r\n            const photoName = snapshot.val();\r\n            const newImages = [];\r\n\r\n            for(let key in photoName){\r\n                storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                    const singleImage = {\r\n                        photoId: key,\r\n                        photoName: photoName[key],\r\n                        photoUrl: url\r\n                    }\r\n\r\n                    newImages.push(singleImage);\r\n\r\n                    this.setState({\r\n                        photosList: newImages\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange =(event) =>{\r\n        //This is the object file for the image uploaded\r\n        const image = event.target.files[0]\r\n\r\n        //Push the file name into the database\r\n        //Note: Ideally I would get the image url immediately after downloading image into storage bucket and push/store THIS in the database (instead of the file name), but this causes issues, must store file name into database and THEN download its url at a later time\r\n        const photosRef = firebase.database().ref().child(\"photos\")\r\n        photosRef.push(image.name);\r\n\r\n        //Upload image into storage bucket\r\n        const uploadImage = storage.ref(image.name).put(image)\r\n        uploadImage.on(\"state_changed\", \r\n        ()=>{   //update state after image is uploaded, so image displays immediately on screen\r\n                //Must grab a snapshot from firebase of photos file names and download url for each in order to update state\r\n                firebase.database().ref().child(\"photos\").on(\"value\", (snapshot)=>{\r\n                    const photoName = snapshot.val();\r\n                    const newImages = [];\r\n        \r\n                    for(let key in photoName){\r\n                        storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                            const singleImage = {\r\n                                photoId: key,\r\n                                photoName: photoName[key],\r\n                                photoUrl: url\r\n                            }\r\n                        \r\n                            newImages.push(singleImage);\r\n        \r\n                            this.setState({\r\n                                photosList: newImages\r\n                            })\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    //Remove photo name from database\r\n    deletePhoto = (event) => {\r\n        const photosRef = firebase.database().ref().child(\"photos\");\r\n        photosRef.child(event.target.id).remove();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"photos wrapper\" id=\"photos\">\r\n                <input id=\"fileUpload\" type=\"file\" className=\"customUpload visuallyHidden\" tabindex=\"1\" onChange={this.handleChange}/>\r\n                <label for=\"fileUpload\" className=\"customUpload\" title=\"Upload photo\">\r\n                    <span class=\"visuallyHidden\">Click here to upload an image</span>ðŸ ‰\r\n                </label>\r\n                <ul className=\"gallery\">\r\n                    {this.state.photosList.map((item, i)=>{\r\n                        return(\r\n                        <li key={i}>\r\n                        <div className=\"titleBar\">\r\n                            <button id={item.photoId} className=\"delete\" onClick={this.deletePhoto} title=\"Delete photo\" tabindex=\"0\">X</button>\r\n                        </div>\r\n                        <img src={item.photoUrl} alt={item.photoName}/>\r\n                        </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUpload","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\"\nimport ImageUpload from \"./ImageUpload\"\n\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state ={\n            //empty array, booksList so render is able to map over something (even if it's nothing)\n            notesList:[],\n            userInput: \"\"\n        }\n    }\n\n    componentDidMount(){\n    //connect to firebase\n    const notesRef = firebase.database().ref().child(\"notes\")\n    notesRef.on(\"value\", (snapshot) =>{\n        const notes = snapshot.val();\n\n        const newNotes = [];\n\n        //for every object, we create a new object with two key values: note text and note id\n        for(let key in notes){\n          console.log(notes[key])\n\n          //Find out the key of each note value in firebase, to figure out how to delete each later\n          const singleNote = {\n              noteId: key,\n              noteText: notes[key]\n            }\n\n            newNotes.push(singleNote)\n        }\n\n        //2. Update our state - taking new array and updating it\n          this.setState({\n              notesList:newNotes\n          })\n      })\n      //RETREIVE THEME LAST SAVED \n      const themeRef = firebase.database().ref().child(\"theme\")\n\n      themeRef.on(\"value\", (snapshot) =>{\n        const theme = snapshot.val()\n\n        let lavender = 0\n        let cork = 0\n        for (let key in theme){\n          if(theme[key] === \"lavender\"){\n            lavender += 1;\n          }else{\n            cork += 1;\n          }\n\n          if(lavender === cork){\n            document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n            document.getElementById(\"toggleTheme\").checked = false;\n          }else{\n            document.body.style.background = \"#8386de\"\n            document.getElementById(\"toggleTheme\").checked = true;\n          }\n        }\n      })\n    }\n\n    openDialog = () => {\n      document.getElementById(\"dialog\").setAttribute(\"open\", true)\n    }\n\n    closeDialog = () => {\n      document.getElementById(\"dialog\").removeAttribute(\"open\")\n      document.getElementById(\"welcome\").removeAttribute(\"open\")\n    }\n\n    toggleTheme = (event) =>{\n      const themeRef = firebase.database().ref().child(\"theme\")\n      if(event.target.checked === true){\n        document.body.style.background = \"#8386de\"\n        themeRef.push(\"lavender\")\n      }else{\n        document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n        themeRef.push(\"cork\")\n      }\n    }\n\n    //update STATE everytime user types inside input text bar\n    handleChange = (event) =>{\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n    //placed on the form\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //Put what we submit, the book title, in a constant\n        const addNote = this.state.userInput\n        //add 'booksToAdd' to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\n\n        //push to firebase\n        const notesRef = firebase.database().ref().child(\"notes\")\n\n        // Make sure no empty strings are submitted\n        if(addNote !== \"\"){\n            notesRef.push(addNote)\n            //Make user input an empty string, make sure to update HTML with value attribute\n            this.setState({\n                userInput: \"\"\n            })\n        }\n  \n    }\n\n    deleteNote = (event) => {\n        console.log(event.target.id);\n        const notesRef = firebase.database().ref().child(\"notes\");\n\n        notesRef.child(event.target.id).remove();\n    }\n\n    render(){\n        return(\n            <main>\n              <label className=\"switch\" title=\"Change theme\">\n              <span class=\"visuallyHidden\">Click here to change the theme</span>\n                <input type=\"checkbox\" onChange={this.toggleTheme} id=\"toggleTheme\" tabindex=\"0\" className=\"visuallyHidden\"/>\n                <span className=\"slider\"></span>\n              </label>\n              <dialog id=\"welcome\" className=\"welcome\" open>\n                <div className=\"titleBar\">\n                  <button id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                </div>\n                <h1>Welcome to QuickNotes!</h1>\n                <p>QuickNotes is an application that allows you to save all your notes and photos in one convenient place.</p>\n                <p>Choose one of the three buttons in the top right corner to get started:</p>\n                <ul>\n                  <li>- Toggle the switch to change themes</li>\n                  <li>- Click the plus sign (+) to create a new note</li>\n                  <li>- Click the arrow (ðŸ ‰) to upload a photo</li>\n                  <li>- Click the \"x\" to delete an item and close the window</li>\n                </ul>\n                <p>Happy posting!</p>\n              </dialog>\n              <section className=\"notes wrapper\" id=\"notes\">\n                <button type=\"open\" onClick={this.openDialog} title=\"New note\">\n                  <span class=\"visuallyHidden\">Click here to write a new note</span>+\n                </button>\n                <dialog id=\"dialog\" className=\"newNote\">\n                  <form onSubmit={this.handleSubmit}>\n                    <div className=\"titleBar\">\n                      <button id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                      <button type=\"submit\" title=\"Submit note\">Add Note +</button>\n                    </div>\n                    <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\n                  </form>\n                </dialog>\n                <ul>\n                    {this.state.notesList.map((noteValue, i)=>{\n                        return(\n                            <li key={i}>\n                              <div className=\"titleBar\">\n                                <button id={noteValue.noteId} className=\"delete\" onClick={this.deleteNote} title=\"Delete note\" tabindex=\"0\">X</button>\n                              </div>\n                              <textarea rows=\"7\" cols=\"16\" value={noteValue.noteText} readOnly></textarea>\n                            </li>\n                        )\n                    })}\n                </ul>\n              </section>\n              <ImageUpload/>\n              <footer>\n                <p>Copyright Â© Alissa Cheng 2019</p>\n              </footer>\n            </main>\n        )\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}